Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Here you need to consider that you need to print BFS path starting from vertex 0 only.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Note : 1. Take graph input in the adjacency matrix.
2. Handle for Disconnected Graphs as well

#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main() {
    // Write your code here
    int v,e;
    cin >> v >> e;
    
    vector<vector<bool>> edges(v, vector<bool>(v, false));
    
    for(int i = 0; i < e; ++i) {
        int first;
        int second;
        cin >> first >> second;
        edges[first][second] = true;
        edges[second][first] = true;
    }
    
    vector<bool> visited(v, false);
    
    queue<int> q;
    
    // If the graph is a connected component graph 
    // We Call BFs for each Component
    for(int i = 0; i < v ; i++) {
        if(!visited[i]) {
            q.push(i);
            visited[i] = true;
            while(!q.empty()) {
        		int front = q.front();
        		q.pop();
        		cout << front << " ";
        
        		for(int i = 0; i < v; i++) {
            		if(edges[front][i] and !visited[i]) {
                		q.push(i);
                		visited[i] = true;
            		}
        		}
    		}
    	}
    }
    
}
